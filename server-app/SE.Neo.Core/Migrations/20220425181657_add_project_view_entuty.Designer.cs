// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using SE.Neo.Core.Data;

#nullable disable

namespace SE.Neo.Core.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220425181657_add_project_view_entuty")]
    partial class add_project_view_entuty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SE.Neo.Core.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Activitity_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Page_Name");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Session_Id");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Activitity_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Activitity_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Activity_Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Navigation menu item click"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Local Search filter apply"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Specific filter apply"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Announcement_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AudienceId")
                        .HasColumnType("int")
                        .HasColumnName("Audience_Id");

                    b.Property<string>("BackgroundImageName")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Background_Image_Name");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("Button_Text");

                    b.Property<string>("ButtonUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Button_Url");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Active");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("AudienceId");

                    b.HasIndex("BackgroundImageName");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ArticleSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Article_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleCMSId")
                        .HasColumnType("int")
                        .HasColumnName("Article_CMS_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Article_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Attachment_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image_Name");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Attachment_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ImageName");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Blob", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Blob_Name");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int")
                        .HasColumnName("Blob_Container_Name");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Name");

                    b.HasIndex("ContainerId");

                    b.ToTable("Blob");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.BlobContainer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Blob_Container_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)")
                        .HasColumnName("Blob_Container_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Blob_Container");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Users"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Conversations"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Companies"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Forums"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Announcement"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Article_Date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image_Url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2")
                        .HasColumnName("Modified_Date");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("Type_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Video_Url");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("CMS_Article");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CMS_Article_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RegionId");

                    b.ToTable("CMS_Article_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Solution_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Solution_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("CMS_Article_Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Technology_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CMS_Article_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Article_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Article_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Article_Type");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            Name = "Video"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Audio"
                        },
                        new
                        {
                            Id = 15,
                            Name = "PDF"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Market Brief"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Articles"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category_Name");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Solution_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("CMS_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.CategoryTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Technology_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CMS_Category_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Region_Name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Parent_Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Solution_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Solution_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Technology_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("About");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Company_Url");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("ImageLogo")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image_Logo");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int")
                        .HasColumnName("Industry_Id");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("LinkedIn_Url");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company_Name");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ImageLogo");

                    b.HasIndex("IndustryId");

                    b.HasIndex("StatusId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Company_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Follower_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("Follower_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Company_Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyOffsitePPA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Offsite_PPA_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("OffsitePPAId")
                        .HasColumnType("int")
                        .HasColumnName("Offsite_PPA_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OffsitePPAId");

                    b.ToTable("Company_Offsite_PPA");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Company_Status_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Company_Status_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Company_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyUrlLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Url_Link_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Url_Link");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Url_Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Company_Url_Link");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Country_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Discussion_Is_Deleted");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit")
                        .HasColumnName("Discussion_Is_Pinned");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Discussion_Subject");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Discussion");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DisscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Disscussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DisscussionId", "CategoryId")
                        .IsUnique();

                    b.ToTable("Discussion_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Follower_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DisscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DisscussionId", "UserId")
                        .IsUnique();

                    b.ToTable("Discussion_Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DisscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Disscussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("DisscussionId", "RegionId")
                        .IsUnique();

                    b.ToTable("Discussion_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DisscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DisscussionId", "UserId")
                        .IsUnique();

                    b.ToTable("Discussion_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussion_User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Highlights")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Highlights");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Highlighted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<int>("LocationType")
                        .HasColumnType("int")
                        .HasColumnName("Location_Type");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Event_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UserRegistration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("User_Registration");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId", "CategoryId")
                        .IsUnique();

                    b.ToTable("Event_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Company_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EventId", "CompanyId")
                        .IsUnique();

                    b.ToTable("Event_Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Link_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Event_Link");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Moderator_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Event_Moderator");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Occurrence_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("From_Date");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("To_Date");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("Event_Occurrence");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.HeardVia", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Heard_Via_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Heard_Via_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Heard_Via");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Conference/Event"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Co-worker"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NEO Network Member"
                        },
                        new
                        {
                            Id = 5,
                            Name = "News/Article"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Referrend by Schneider Electric Client Manager"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Referrend by other Schneider Electric employee"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Renewable Energy Developer/Energy Company"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Schneider Electric's Perspectives Summit"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Social Media"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Television"
                        },
                        new
                        {
                            Id = 12,
                            Name = "The World Bank"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Web Search"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 15,
                            Name = "I am an employee"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Industry_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Industry_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Location_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit")
                        .HasColumnName("Message_Is_Pinned");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Message_Id");

                    b.Property<string>("Text")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Message_Text");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.MessageLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Message_Like_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Message_Like");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.OffsitePPA", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Offsite_PPA_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Offsite_PPA_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Offsite_PPA");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ownership during Construction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "O&M Activities"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Long Term Ownership Interest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Technology Diversification"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Balancing Party"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Retail / Integrated Company"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Permission_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Account settings edit others"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Announcement manage"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comment delete others"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Comment pin"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Company management"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Event create"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Event delete"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Event edit"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Event save draft"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Project add"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Project delete published by me"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Project delete published by others"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Project edit published by me"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Project edit published by others"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Project save draft"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Project mark as favorite"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Project view all"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Provider contact"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Tool add"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Tool delete"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Tool edit"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Tool view all"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Topic create private"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Topic delete published by others"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Topic edit published by others"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Topic pin"
                        },
                        new
                        {
                            Id = 27,
                            Name = "User add"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Topic view private"
                        },
                        new
                        {
                            Id = 29,
                            Name = "User export"
                        },
                        new
                        {
                            Id = 30,
                            Name = "User edit"
                        },
                        new
                        {
                            Id = 31,
                            Name = "User admit"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Conversation view all"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Conversation create group"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Event view all"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Pinned");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Project_Name");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Location_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("Location_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Location");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_View_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project_View");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.QuoteContractStructure", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Quote_Contract_Structure_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Quote_Contract_Structure_Name");

                    b.HasKey("Id");

                    b.ToTable("Quote_Contract_Structure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash Purchase"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Power Purchase Agreement"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.QuoteInterest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Quote_Interest_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Quote_Interest_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Quote_Interest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cost Savings"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Environmental Attributes and/or Carbon Reduction Targets"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Story / Publicity"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Resiliency"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Something Else"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Responsibility", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Responsibility_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Responsibility_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Responsibility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sustainability"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Procurement"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Buildings"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Special");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Role_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Permission_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Permission");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("AnnualPower")
                        .HasColumnType("int")
                        .HasColumnName("Annual_Power");

                    b.Property<bool?>("BuildingOwned")
                        .HasColumnType("bit")
                        .HasColumnName("Building_Owned");

                    b.Property<int?>("CarportArea")
                        .HasColumnType("int")
                        .HasColumnName("Carport_Area");

                    b.Property<int?>("CarportAreaType")
                        .HasColumnType("int")
                        .HasColumnName("Carport_Area_Type");

                    b.Property<bool?>("CarportAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("Carport_Available");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("LandArea")
                        .HasColumnType("int")
                        .HasColumnName("Land_Area");

                    b.Property<int?>("LandAreaType")
                        .HasColumnType("int")
                        .HasColumnName("Land_Area_Type");

                    b.Property<bool?>("LandAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("Land_Available");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<bool>("PortfolioReview")
                        .HasColumnType("bit")
                        .HasColumnName("Portfolio_Review");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Requested_By_User_Id");

                    b.Property<int?>("RoofArea")
                        .HasColumnType("int")
                        .HasColumnName("Roof_Area");

                    b.Property<int?>("RoofAreaType")
                        .HasColumnType("int")
                        .HasColumnName("Roof_Area_Type");

                    b.Property<bool?>("RoofAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("Roof_Available");

                    b.Property<string>("SiteAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Site_Address");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RequestedByUserId");

                    b.ToTable("Solar_Quote");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteContractStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Solar_Contract_Structure_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("QuoteContractStructureId")
                        .HasColumnType("int")
                        .HasColumnName("Quote_Contract_Structure_Id");

                    b.Property<int>("SolarQuoteId")
                        .HasColumnType("int")
                        .HasColumnName("Solar_Quote_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("QuoteContractStructureId");

                    b.HasIndex("SolarQuoteId");

                    b.ToTable("Solar_Quote_Contract_Structure");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Solar_Quote_Interest_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("QuoteInterestId")
                        .HasColumnType("int")
                        .HasColumnName("Quote_Interest_Id");

                    b.Property<int>("SolarQuoteId")
                        .HasColumnType("int")
                        .HasColumnName("Solar_Quote_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("QuoteInterestId");

                    b.HasIndex("SolarQuoteId");

                    b.ToTable("Solar_Quote_Interest");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("State_Abbr");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("State_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Display_Name");

                    b.Property<bool>("HasDST")
                        .HasColumnType("bit")
                        .HasColumnName("Has_DST");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Standard_Name");

                    b.Property<int>("UTCOffset")
                        .HasColumnType("int")
                        .HasColumnName("UTC_Offset");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Time_Zone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Icon_Url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Active");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ToolType")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Type");

                    b.Property<string>("ToolUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tool_Url");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Company_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ToolId");

                    b.ToTable("Tool_Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ToolId");

                    b.ToTable("Tool_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.HasIndex("UserId");

                    b.ToTable("Tool_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("First_Name");

                    b.Property<int>("HeardViaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(14)
                        .HasColumnName("User_Heard_Via_Id");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HeardViaId");

                    b.HasIndex("ImageName");

                    b.HasIndex("StatusId");

                    b.HasIndex("TimeZoneId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Follower_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int")
                        .HasColumnName("Followed_Id");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("Follower_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("User_Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Notification_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DetailsModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Details_Modified_Time");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Read");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Seen");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Notification_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsRead");

                    b.HasIndex("UserId", "IsSeen");

                    b.ToTable("User_Notification");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Company_Id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Company_Name");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Country_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("First_Name");

                    b.Property<int>("HeardViaId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Heard_Via_Id");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Role_Id");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Time_Zone_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HeardViaId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TimeZoneId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("User_Pending");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Permission_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Permission");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("About");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Job_Title");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("LinkedIn_Url");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("ResponsibilityId")
                        .HasColumnType("int")
                        .HasColumnName("User_Responsibility_Id");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("UserId");

                    b.HasIndex("ResponsibilityId");

                    b.HasIndex("StateId");

                    b.ToTable("User_Profile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileUrlLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Url_Link_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Url_Link");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Url_Name");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Url_Link");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("User_Status_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("User_Status_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("User_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Onboard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Announcement", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Audience")
                        .WithMany()
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Blob", "BackgroundImage")
                        .WithMany()
                        .HasForeignKey("BackgroundImageName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Audience");

                    b.Navigation("BackgroundImage");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ArticleSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Attachment", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Blob", "Image")
                        .WithMany()
                        .HasForeignKey("ImageName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Blob", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.BlobContainer", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Article", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.ArticleType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleSolution", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleTechnology", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Solution", "Solution")
                        .WithMany("Categories")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.CategoryTechnology", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("Technologies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Technology", "Technology")
                        .WithMany("Categories")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Blob", "Image")
                        .WithMany()
                        .HasForeignKey("ImageLogo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CompanyStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Industry");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyFollower", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyOffsitePPA", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("OffsitePPAs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.OffsitePPA", "OffsitePPA")
                        .WithMany()
                        .HasForeignKey("OffsitePPAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("OffsitePPA");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyUrlLink", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("UrlLinks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("DiscussionCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionCategories")
                        .HasForeignKey("DisscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionFollower", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionFollowers")
                        .HasForeignKey("DisscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionRegions")
                        .HasForeignKey("DisscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany("DiscussionRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionSaved")
                        .HasForeignKey("DisscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionUser", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionUsers")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("EventCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventCompany", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventCompanies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventLink", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventModerator", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventModerators")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventOccurrence", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventOccurrences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Message", "ParentMessage")
                        .WithMany("Messages")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("ParentMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.MessageLike", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Message", "Message")
                        .WithMany("MessageLikes")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectLocation", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Location", "Location")
                        .WithMany("Projects")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany("Locations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectView", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuote", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteContractStructure", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.QuoteContractStructure", "QuoteContractStructure")
                        .WithMany()
                        .HasForeignKey("QuoteContractStructureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.SolarQuote", "SolarQuote")
                        .WithMany("ContractStructures")
                        .HasForeignKey("SolarQuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuoteContractStructure");

                    b.Navigation("SolarQuote");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteInterest", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.QuoteInterest", "QuoteInterest")
                        .WithMany()
                        .HasForeignKey("QuoteInterestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.SolarQuote", "SolarQuote")
                        .WithMany("Interests")
                        .HasForeignKey("SolarQuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuoteInterest");

                    b.Navigation("SolarQuote");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.State", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolCompany", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany("Companies")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany("Roles")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.HeardVia", "HeardVia")
                        .WithMany()
                        .HasForeignKey("HeardViaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Blob", "Image")
                        .WithMany()
                        .HasForeignKey("ImageName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.UserStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("HeardVia");

                    b.Navigation("Image");

                    b.Navigation("Status");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserFollower", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "Followed")
                        .WithMany("FollowerUsers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "Follower")
                        .WithMany("FollowedUsers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserNotification", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPending", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.HeardVia", "HeardVia")
                        .WithMany()
                        .HasForeignKey("HeardViaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("HeardVia");

                    b.Navigation("Role");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPermission", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Responsibility", "Responsibility")
                        .WithMany()
                        .HasForeignKey("ResponsibilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("SE.Neo.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Responsibility");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("UserProfiles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Categories")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany("UserProfiles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Regions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileUrlLink", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("UrlLinks")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.Navigation("DiscussionCategories");

                    b.Navigation("EventCategories");

                    b.Navigation("Technologies");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Region", b =>
                {
                    b.Navigation("DiscussionRegions");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Solution", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Technology", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("OffsitePPAs");

                    b.Navigation("Projects");

                    b.Navigation("UrlLinks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.Navigation("DiscussionCategories");

                    b.Navigation("DiscussionFollowers");

                    b.Navigation("DiscussionRegions");

                    b.Navigation("DiscussionSaved");

                    b.Navigation("DiscussionUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Event", b =>
                {
                    b.Navigation("EventCategories");

                    b.Navigation("EventCompanies");

                    b.Navigation("EventLinks");

                    b.Navigation("EventModerators");

                    b.Navigation("EventOccurrences");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Location", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("MessageLikes");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Permission", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuote", b =>
                {
                    b.Navigation("ContractStructures");

                    b.Navigation("Interests");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Tool", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.Navigation("FollowedUsers");

                    b.Navigation("FollowerUsers");

                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Regions");

                    b.Navigation("UrlLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
