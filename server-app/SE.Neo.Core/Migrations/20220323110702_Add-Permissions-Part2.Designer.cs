// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using SE.Neo.Core.Data;

#nullable disable

namespace SE.Neo.Core.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220323110702_Add-Permissions-Part2")]
    partial class AddPermissionsPart2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SE.Neo.Core.Entities.ArticleSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Article_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleCMSId")
                        .HasColumnType("int")
                        .HasColumnName("Article_CMS_Id");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Article_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Attachment_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Attachment_Type");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CMSId")
                        .HasColumnType("int")
                        .HasColumnName("Category_CMS_Id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category_Name");

                    b.HasKey("Id");

                    b.ToTable("CMS_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CMSId")
                        .HasColumnType("int")
                        .HasColumnName("Region_CMS_Id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Region_Name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Region_Id");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CMS_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Solution_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CMSId")
                        .HasColumnType("int")
                        .HasColumnName("Solution_CMS_Id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Solution_Name");

                    b.HasKey("Id");

                    b.ToTable("CMS_Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CMSId")
                        .HasColumnType("int")
                        .HasColumnName("Technology_CMS_Id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Technology_Name");

                    b.HasKey("Id");

                    b.ToTable("CMS_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contracts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DefaultLocationId")
                        .HasColumnType("int")
                        .HasColumnName("Default_Location_Id");

                    b.Property<string>("InstalledLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Installed_Location");

                    b.Property<bool>("IsEACIncluded")
                        .HasColumnType("bit")
                        .HasColumnName("Is_EAC_Included");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company_Name");

                    b.Property<string>("PaybackPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Payback_Period");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Technology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermLength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Term_Length");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("WebSiteLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Web_Site_Link");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLocationId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Location_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("Location_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("Company_Location");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Country_Name");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<bool>("Pinned")
                        .HasColumnType("bit")
                        .HasColumnName("Discussion_Pinned");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Discussion_Subject");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Discussion");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussion_User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Location_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Message_Id");

                    b.Property<bool>("Pinned")
                        .HasColumnType("bit")
                        .HasColumnName("Message_Pinned");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message_Text");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Permission_Name");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionName = "Account settings edit my own"
                        },
                        new
                        {
                            Id = 2,
                            PermissionName = "Account settings edit others"
                        },
                        new
                        {
                            Id = 3,
                            PermissionName = "Announcement add to dashboard"
                        },
                        new
                        {
                            Id = 4,
                            PermissionName = "Comment delete my own"
                        },
                        new
                        {
                            Id = 5,
                            PermissionName = "Comment delete others"
                        },
                        new
                        {
                            Id = 6,
                            PermissionName = "Comment pin"
                        },
                        new
                        {
                            Id = 7,
                            PermissionName = "Company add"
                        },
                        new
                        {
                            Id = 8,
                            PermissionName = "Event create"
                        },
                        new
                        {
                            Id = 9,
                            PermissionName = "Event delete"
                        },
                        new
                        {
                            Id = 10,
                            PermissionName = "Event edit"
                        },
                        new
                        {
                            Id = 11,
                            PermissionName = "Event save draft"
                        },
                        new
                        {
                            Id = 12,
                            PermissionName = "Project add"
                        },
                        new
                        {
                            Id = 13,
                            PermissionName = "Project delete published by me"
                        },
                        new
                        {
                            Id = 14,
                            PermissionName = "Project delete published by others"
                        },
                        new
                        {
                            Id = 15,
                            PermissionName = "Project edit published by me"
                        },
                        new
                        {
                            Id = 16,
                            PermissionName = "Project edit published by others"
                        },
                        new
                        {
                            Id = 17,
                            PermissionName = "Project save draft"
                        },
                        new
                        {
                            Id = 18,
                            PermissionName = "Project mark as favorite"
                        },
                        new
                        {
                            Id = 19,
                            PermissionName = "Project view all"
                        },
                        new
                        {
                            Id = 20,
                            PermissionName = "Provider contact"
                        },
                        new
                        {
                            Id = 21,
                            PermissionName = "Tool add"
                        },
                        new
                        {
                            Id = 22,
                            PermissionName = "Tool delete"
                        },
                        new
                        {
                            Id = 23,
                            PermissionName = "Tool edit"
                        },
                        new
                        {
                            Id = 24,
                            PermissionName = "Tool view"
                        },
                        new
                        {
                            Id = 25,
                            PermissionName = "Tool view all"
                        },
                        new
                        {
                            Id = 26,
                            PermissionName = "Topic add"
                        },
                        new
                        {
                            Id = 27,
                            PermissionName = "Topic create private"
                        },
                        new
                        {
                            Id = 28,
                            PermissionName = "Topic delete published by others"
                        },
                        new
                        {
                            Id = 29,
                            PermissionName = "Topic edit published by others"
                        },
                        new
                        {
                            Id = 30,
                            PermissionName = "Topic pin"
                        },
                        new
                        {
                            Id = 31,
                            PermissionName = "User add"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Pinned");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Project_Name");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Special");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Role_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Permission_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Permission");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("State_Abbr");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("State_Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Display_Name");

                    b.Property<bool>("HasDST")
                        .HasColumnType("bit")
                        .HasColumnName("Has_DST");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Standard_Name");

                    b.Property<int>("UTCOffset")
                        .HasColumnType("int")
                        .HasColumnName("UTC_Offset");

                    b.HasKey("Id");

                    b.ToTable("Time_Zone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Icon_Url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Active");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ToolUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tool_Url");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Company_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ToolId");

                    b.ToTable("Tool_Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ToolId");

                    b.ToTable("Tool_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.HasIndex("UserId");

                    b.ToTable("Tool_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("First_Name");

                    b.Property<string>("ImageKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Image_Key");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Status_Id");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TimeZoneId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Follower_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int")
                        .HasColumnName("Followed_Id");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("Follower_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("User_Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Notification_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Read");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Notification_Type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("User_Notification");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Permission_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Permission");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("About");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Job_Title");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("LinkedIn_Url");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    b.HasKey("UserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("User_Profile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Solution_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Solution_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SolutionId")
                        .HasColumnType("int")
                        .HasColumnName("Solution_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("Technology_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileUrlLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Url_Link_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Url_Link");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Url_Name");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Url_Link");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("User_Status_Id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("User_Status_Name");

                    b.HasKey("Id");

                    b.ToTable("User_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Denied"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Onboard"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Active"
                        },
                        new
                        {
                            Id = 5,
                            StatusName = "Inactive"
                        },
                        new
                        {
                            Id = 6,
                            StatusName = "Deleted"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ArticleSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Attachment", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Region", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "ParentRegion")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentRegion");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Location", "DefaultLocation")
                        .WithMany("DefaultCompanies")
                        .HasForeignKey("DefaultLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DefaultLocation");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyLocation", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Location", "Location")
                        .WithMany("Companies")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionUser", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionUsers")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Message", null)
                        .WithMany("Messages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.State", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolCompany", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany("Companies")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany("Roles")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Status");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserFollower", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "Followed")
                        .WithMany()
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserNotification", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPermission", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("SE.Neo.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("UserProfiles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Categories")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany("UserProfiles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Regions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileSolution", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Solution", "Solution")
                        .WithMany("UserProfiles")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Solutions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Solution");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileTechnology", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Technology", "Technology")
                        .WithMany("UserProfiles")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Technologies")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Technology");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileUrlLink", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("UrlLinks")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Region", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Solution", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Technology", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.Navigation("DiscussionUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Location", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("DefaultCompanies");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Permission", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Tool", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Regions");

                    b.Navigation("Solutions");

                    b.Navigation("Technologies");

                    b.Navigation("UrlLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
