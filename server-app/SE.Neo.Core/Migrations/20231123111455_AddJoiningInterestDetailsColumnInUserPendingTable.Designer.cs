// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SE.Neo.Core.Data;

#nullable disable

namespace SE.Neo.Core.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231123111455_AddJoiningInterestDetailsColumnInUserPendingTable")]
    partial class AddJoiningInterestDetailsColumnInUserPendingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SE.Neo.Core.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Announcement_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AudienceId")
                        .HasColumnType("int")
                        .HasColumnName("Audience_Id");

                    b.Property<string>("BackgroundImageName")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Background_Image_Name");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("Button_Text");

                    b.Property<string>("ButtonUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Button_Url");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Active");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("AudienceId");

                    b.HasIndex("BackgroundImageName");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ArticleSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Article_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("Article_CMS_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Article_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Attachment_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image_Name");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Attachment_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ImageName");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Blob", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Blob_Name");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int")
                        .HasColumnName("Blob_Container_Name");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Name");

                    b.HasIndex("ContainerId");

                    b.ToTable("Blob");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.BlobContainer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Blob_Container_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)")
                        .HasColumnName("Blob_Container_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Blob_Container");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Users"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Conversations"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Companies"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Forums"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Announcement"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Article_Date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image_Url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2")
                        .HasColumnName("Modified_Date");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("PdfUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasColumnName("Pdf_Url");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Article_Slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("Type_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Video_Url");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("CMS_Article");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CMS_Article_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RegionId");

                    b.ToTable("CMS_Article_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("RoleId");

                    b.ToTable("CMS_Article_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Solution_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("SolutionId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Solution_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("CMS_Article_Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Technology_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CMS_Article_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Article_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Article_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Article_Type");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            Name = "Video"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Audio"
                        },
                        new
                        {
                            Id = 15,
                            Name = "PDF"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Market Brief"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Articles"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Article_View_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("Article_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Article_View");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Category_Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Category_Slug");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Solution_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("CMS_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.CategoryTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Technology_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("CMS_Category_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Region_Name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Parent_Region_Id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Region_Slug");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Solution_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Solution_Name");

                    b.Property<string>("Scope")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Scope");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Solution_Slug");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CMS_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Technology_Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Technology_Slug");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("CMS_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(12000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("About");

                    b.Property<string>("CompanyUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Company_Url");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("ImageLogo")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image_Logo");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int")
                        .HasColumnName("Industry_Id");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("LinkedIn_Url");

                    b.Property<string>("MDMKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasDefaultValue("")
                        .HasColumnName("MDM_Key");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Company_Name");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("Type_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ImageLogo");

                    b.HasIndex("IndustryId");

                    b.HasIndex("Name");

                    b.HasIndex("StatusId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Company_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Follower_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("Follower_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Company_Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyOffsitePPA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Company_Offsite_PPA_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("OffsitePPAId")
                        .HasColumnType("int")
                        .HasColumnName("Offsite_PPA_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OffsitePPAId");

                    b.ToTable("Company_Offsite_PPA");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Company_Status_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Company_Status_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Company_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyUrlLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Url_Link_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Url_Link");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Url_Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Company_Url_Link");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ContractStructure", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Contract_Structure_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Contract_Structure_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Contract_Structure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash Purchase"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Power Purchase Agreement"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lease"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Shared Savings"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Guaranteed Savings"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Discount to Tariff"
                        },
                        new
                        {
                            Id = 8,
                            Name = "As-a-Service or Alternative Financing"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("Country_Code");

                    b.Property<string>("Code3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("Country_Code3");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Country_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Currency_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Currency_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "USD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GBP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AUD"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CAD"
                        },
                        new
                        {
                            Id = 6,
                            Name = "MXN"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Discussion_Is_Deleted");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit")
                        .HasColumnName("Discussion_Is_Pinned");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("SourceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Source_Type");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Discussion_Subject");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SourceTypeId");

                    b.ToTable("Discussion");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DisscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Disscussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DisscussionId", "CategoryId")
                        .IsUnique();

                    b.ToTable("Discussion_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Follower_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DisscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DisscussionId", "UserId")
                        .IsUnique();

                    b.ToTable("Discussion_Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DisscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Disscussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("DisscussionId", "RegionId")
                        .IsUnique();

                    b.ToTable("Discussion_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DiscussionId", "UserId")
                        .IsUnique();

                    b.ToTable("Discussion_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionSource", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Source_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Discussion_Source_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Discussion_Source");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Provider Contact"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discussion_User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussion_User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EmailAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Email_Alert_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("Category");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("Frequency");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Email_Alert");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Highlights")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Highlights");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Highlighted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Location");

                    b.Property<int>("LocationType")
                        .HasColumnType("int")
                        .HasColumnName("Location_Type");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UserRegistration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("User_Registration");

                    b.HasKey("Id");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventAttendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Attendee_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<bool>("IsAttending")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Attending");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId", "EventId")
                        .IsUnique();

                    b.ToTable("Event_Attendee");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId", "CategoryId")
                        .IsUnique();

                    b.ToTable("Event_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Invited_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId", "CategoryId")
                        .IsUnique();

                    b.ToTable("Event_Invited_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Invited_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("EventId", "RegionId")
                        .IsUnique();

                    b.ToTable("Event_Invited_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Invited_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("EventId", "RoleId")
                        .IsUnique();

                    b.ToTable("Event_Invited_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Invited_User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("Event_Invited_User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Link_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Event_Link");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Moderator_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Event_Moderator");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Event_Occurrence_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("Event_Id");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("From_Date");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("To_Date");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Event_Occurrence");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.HeardVia", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Heard_Via_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Heard_Via_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Heard_Via");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Conference/Event"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Co-Worker"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Zeigo Network Member"
                        },
                        new
                        {
                            Id = 4,
                            Name = "News/Article"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Referred by Schneider Electric Contact"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Social Media"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Web Search"
                        },
                        new
                        {
                            Id = 8,
                            Name = "I am an Employee"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Industry_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Industry_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.JobLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Job_Log_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("JobType")
                        .HasColumnType("int")
                        .HasColumnName("Job_Type");

                    b.Property<DateTime>("LastRunTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Run_Time");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Job_Log");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int")
                        .HasColumnName("Discussion_Id");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit")
                        .HasColumnName("Message_Is_Pinned");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Message_Id");

                    b.Property<string>("Text")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message_Text");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.MessageLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Message_Like_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Message_Like");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.OffsitePPA", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Offsite_PPA_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Offsite_PPA_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Offsite_PPA");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ownership during Construction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "O&M Activities"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Long Term Ownership Interest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Technology Diversification"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Balancing Party"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Retail / Integrated Company"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Permission_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin All"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Announcement Management"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Company Management"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Data Sync"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Event Management"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Messages All"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Project Catalog View"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Project Management All"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Project Management Own"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Send Quote"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Tool Management"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Forum Management"
                        },
                        new
                        {
                            Id = 13,
                            Name = "User Access Management"
                        },
                        new
                        {
                            Id = 14,
                            Name = "User Profile Edit"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Email Alert Management"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Project Private Details View"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Changed_On");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("FirstTimePublishedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("First_Time_Published_On");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Pinned");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Opportunity")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Opportunity");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("Owner_Id");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SubTitle");

                    b.Property<string>("Tags")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasColumnName("Tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.EAC", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("EAC_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("EAC_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("EAC");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "REC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Green-E REC"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GO"
                        },
                        new
                        {
                            Id = 4,
                            Name = "REGO"
                        },
                        new
                        {
                            Id = 5,
                            Name = "I-REC"
                        },
                        new
                        {
                            Id = 6,
                            Name = "LGC"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.IsoRto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ISO_RTO_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ISO_RTO_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("ISO_RTO");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PJM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ISONE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MISO"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SERC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SPP"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ERCOT"
                        },
                        new
                        {
                            Id = 7,
                            Name = "WECC"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CAISO"
                        },
                        new
                        {
                            Id = 9,
                            Name = "AESO"
                        },
                        new
                        {
                            Id = 10,
                            Name = "NYISO"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.PricingStructure", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Contract_Price_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Contract_Price_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Contract_Price");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plain CFD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Upside Share"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Market Following"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fixed Discount to Market"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Product_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Product_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Product_Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Energy Only"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Energy with Project EACs"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Energy with Certified Swap EACs"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Retail Delivered Product"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.PurchaseOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Purchase_Option_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Purchase_Option_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Purchase_Option");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Behind the Meter"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In front of the Meter"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.SettlementCalculationInterval", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Calculation_Interval_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Settlement_Calculation_Interval_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Settlement_Calculation_Interval");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hourly"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Monthly"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Semi-annual"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Annual"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.SettlementHubOrLoadZone", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Settlement_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Settlement_Hub_Or_Load_Zone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AZ-PV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CA-NP15"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CA-SP15"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CA-ZP26"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ERCOT-H"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ERCOT-N"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ERCOT-S"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ERCOT-W"
                        },
                        new
                        {
                            Id = 9,
                            Name = "MISO-IA"
                        },
                        new
                        {
                            Id = 10,
                            Name = "MISO-Ark"
                        },
                        new
                        {
                            Id = 11,
                            Name = "MISO-Gul"
                        },
                        new
                        {
                            Id = 12,
                            Name = "MISO-IL"
                        },
                        new
                        {
                            Id = 13,
                            Name = "MISO-IN"
                        },
                        new
                        {
                            Id = 14,
                            Name = "MISO-MI"
                        },
                        new
                        {
                            Id = 15,
                            Name = "MISO-MN"
                        },
                        new
                        {
                            Id = 16,
                            Name = "MISO-MO"
                        },
                        new
                        {
                            Id = 17,
                            Name = "MISO-ND"
                        },
                        new
                        {
                            Id = 18,
                            Name = "NY-A"
                        },
                        new
                        {
                            Id = 19,
                            Name = "NY-G"
                        },
                        new
                        {
                            Id = 20,
                            Name = "NY-J"
                        },
                        new
                        {
                            Id = 21,
                            Name = "SPP-S"
                        },
                        new
                        {
                            Id = 22,
                            Name = "SPP-N"
                        },
                        new
                        {
                            Id = 23,
                            Name = "PJM-AEP GEN HUB"
                        },
                        new
                        {
                            Id = 24,
                            Name = "PJM-AEP-DAYTON HUB"
                        },
                        new
                        {
                            Id = 25,
                            Name = "PJM-ATSI GEN HUB"
                        },
                        new
                        {
                            Id = 26,
                            Name = "PJM-CHICAGO GEN HUB"
                        },
                        new
                        {
                            Id = 27,
                            Name = "PJM-CHICAGO HUB"
                        },
                        new
                        {
                            Id = 28,
                            Name = "PJM-DOMINION HUB"
                        },
                        new
                        {
                            Id = 29,
                            Name = "PJM-EASTERN HUB"
                        },
                        new
                        {
                            Id = 30,
                            Name = "PJM-N ILLINOIS HUB"
                        },
                        new
                        {
                            Id = 31,
                            Name = "PJM-N NEW JERSEY HUB"
                        },
                        new
                        {
                            Id = 32,
                            Name = "PJM-N OHIO HUB"
                        },
                        new
                        {
                            Id = 33,
                            Name = "PJM-N WEST INT HUB"
                        },
                        new
                        {
                            Id = 34,
                            Name = "PJM-N WESTERN HUB"
                        },
                        new
                        {
                            Id = 35,
                            Name = "PSEG Load Zone"
                        },
                        new
                        {
                            Id = 36,
                            Name = "ComEd Load Zone"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Dominion Load Zone"
                        },
                        new
                        {
                            Id = 38,
                            Name = "NEPOOL"
                        },
                        new
                        {
                            Id = 39,
                            Name = "NE-CT"
                        },
                        new
                        {
                            Id = 40,
                            Name = "NE-MA"
                        },
                        new
                        {
                            Id = 41,
                            Name = "NE-ME"
                        },
                        new
                        {
                            Id = 42,
                            Name = "NE-NH"
                        },
                        new
                        {
                            Id = 43,
                            Name = "NE-RI"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 45,
                            Name = "MISO-LA"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.SettlementPriceInterval", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Price_Interval_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Settlement_Price_Interval_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Settlement_Price_Interval");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Day-Ahead"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Real-Time"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intraday"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDataTypes.SettlementType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Settlement_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Settlement_Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hub"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Busbar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Loadzone"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectBatteryStorageDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Battery_Storage_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumAnnualPeakKW")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Annual");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Battery_Storage_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectCarbonOffsetsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Carbon_Offsets_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumPurchaseVolume")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Purchase_Volume");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Carbon_Offsets_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectCarbonOffsetsDetailsTermLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Carbon_Offsets_Details_Term_Length_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectCarbonOffsetsDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Carbon_Offsets_Details_Id");

                    b.Property<int>("TermLengthId")
                        .HasColumnType("int")
                        .HasColumnName("Term_Length_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("TermLengthId");

                    b.HasIndex("ProjectCarbonOffsetsDetailsId", "TermLengthId")
                        .IsUnique();

                    b.ToTable("Project_Carbon_Offsets_Details_Term_Length");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectCommunitySolarDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Community_Solar_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool?>("IsInvestmentGradeCreditOfOfftakerRequired")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Investment_Grade_Credit_Of_Offtaker_Required");

                    b.Property<int?>("MinimumAnnualMWh")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Annual_MWh");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<DateTime?>("ProjectAvailabilityApproximateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Project_Availability_Approximate_Date");

                    b.Property<bool?>("ProjectAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("Project_Available");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("TotalAnnualMWh")
                        .HasColumnType("int")
                        .HasColumnName("Total_Annual_MWh");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UtilityTerritory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Utility_Territory");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Community_Solar_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectContractStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Contract_Structure_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractStructureId")
                        .HasColumnType("int")
                        .HasColumnName("Contract_Structure_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ContractStructureId");

                    b.HasIndex("ProjectId", "ContractStructureId")
                        .IsUnique();

                    b.ToTable("Project_Contract_Structure");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEACDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_EAC_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumPurchaseVolume")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Purchase_Volume");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_EAC_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEACDetailsTermLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_EAC_Details_Term_Length_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectEACDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("Project_EAC_Details_Id");

                    b.Property<int>("TermLengthId")
                        .HasColumnType("int")
                        .HasColumnName("Term_Length_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("TermLengthId");

                    b.HasIndex("ProjectEACDetailsId", "TermLengthId")
                        .IsUnique();

                    b.ToTable("Project_EAC_Details_Term_Length");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEfficiencyAuditsAndConsultingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Efficiency_Audits_And_Consulting_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool?>("IsInvestmentGradeCreditOfOfftakerRequired")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Investment_Grade_Credit_Of_Offtaker_Required");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Efficiency_Audits_And_Consulting_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEfficiencyEquipmentMeasuresDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Efficiency_Equipment_Measures_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool?>("IsInvestmentGradeCreditOfOfftakerRequired")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Investment_Grade_Credit_Of_Offtaker_Required");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Efficiency_Equipment_Measures_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEmergingTechnologyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Emerging_Technology_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("EnergyUnitId")
                        .HasColumnType("int")
                        .HasColumnName("Energy_Unit_Id");

                    b.Property<int?>("MinimumAnnualValue")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Annual_Value");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Emerging_Technology_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEVChargingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_EV_Charging_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumChargingStationsRequired")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Charging_Stations_Required");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_EV_Charging_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectFuelCellsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Fuel_Cells_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumAnnualSiteKWh")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Annual_Site_KWh");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Fuel_Cells_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectGreenTariffsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Green_Tariffs_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumPurchaseVolume")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Purchase_Volume");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("ProgramWebsite")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Program_Website");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("TermLengthId")
                        .HasColumnType("int")
                        .HasColumnName("Term_Length_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UtilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Utility_Name");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("TermLengthId");

                    b.ToTable("Project_Green_Tariffs_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectOffsitePowerPurchaseAgreementDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Offsite_Power_Purchase_Agreement_Details");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalNotesForSEOperationsTeam")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Additional_Notes_For_SE_Operations_Team");

                    b.Property<DateTime?>("CommercialOperationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Commercial_Operation_Date");

                    b.Property<string>("ContractPricePerMWh")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Contract_Price_Per_MWh");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("DiscountAmount")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Discount_Amount");

                    b.Property<string>("EACCustom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EAC_Custom");

                    b.Property<int?>("EACId")
                        .HasColumnType("int")
                        .HasColumnName("EAC_Id");

                    b.Property<string>("EACValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EAC_Value");

                    b.Property<string>("FloatingMarketSwapCap")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Floating_Market_Swap_Cap");

                    b.Property<string>("FloatingMarketSwapFloor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Floating_Market_Swap_Floor");

                    b.Property<string>("FloatingMarketSwapIndexDiscount")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Floating_Market_Swap_Index_Discount");

                    b.Property<int?>("ForAllPriceEntriesCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("For_All_Price_Entries_Currency_Id");

                    b.Property<int?>("IsoRtoId")
                        .HasColumnType("int")
                        .HasColumnName("ISORTO_Id");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("Latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("Longitude");

                    b.Property<int?>("MinimumOfftakeMWhVolumeRequired")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Offtake_MWh_Volume_Required");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("NotesForPotentialOfftakers")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Notes_For_Potential_Offtakers");

                    b.Property<int?>("PPATermYearsLength")
                        .HasColumnType("int")
                        .HasColumnName("PPA_Term_Years_Length");

                    b.Property<int?>("PricingStructureId")
                        .HasColumnType("int")
                        .HasColumnName("Pricing_Structure_Id");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Product_Type_Id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("ProjectMWCurrentlyAvailable")
                        .HasColumnType("int")
                        .HasColumnName("Project_MW_Currently_Available");

                    b.Property<int?>("SettlementCalculationIntervalId")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Calculation_Interval_Id");

                    b.Property<int?>("SettlementHubOrLoadZoneId")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Hub_Or_LoadZone_Id");

                    b.Property<string>("SettlementPriceIntervalCustom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Settlement_Price_Interval_Custom");

                    b.Property<int?>("SettlementPriceIntervalId")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Price_Interval_Id");

                    b.Property<int?>("SettlementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Settlement_Type_Id");

                    b.Property<int?>("TotalProjectExpectedAnnualMWhProductionP50")
                        .HasColumnType("int")
                        .HasColumnName("Total_Project_Expected_Annual_MWh_Production_P50");

                    b.Property<int?>("TotalProjectNameplateMWACCapacity")
                        .HasColumnType("int")
                        .HasColumnName("Total_Project_Nameplate_MWAC_Capacity");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int?>("UpsidePercentageToDeveloper")
                        .HasColumnType("int")
                        .HasColumnName("Upside_Percentage_To_Developer");

                    b.Property<int?>("UpsidePercentageToOfftaker")
                        .HasColumnType("int")
                        .HasColumnName("Upside_Percentage_To_Offtaker");

                    b.HasKey("Id");

                    b.HasIndex("EACId");

                    b.HasIndex("ForAllPriceEntriesCurrencyId");

                    b.HasIndex("IsoRtoId");

                    b.HasIndex("PricingStructureId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("SettlementCalculationIntervalId");

                    b.HasIndex("SettlementHubOrLoadZoneId");

                    b.HasIndex("SettlementPriceIntervalId");

                    b.HasIndex("SettlementTypeId");

                    b.ToTable("Project_Offsite_Power_Purchase_Agreement_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectOffsitePPADetailsValueProvided", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Offsite_Power_Purchase_Agreement_Details_Value_Provided_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectOffsitePowerPurchaseAgreementDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Offsite_Power_Purchase_Agreement_Details_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("ValueProvidedId")
                        .HasColumnType("int")
                        .HasColumnName("Value_Provided_Id");

                    b.HasKey("Id");

                    b.HasIndex("ValueProvidedId");

                    b.HasIndex("ProjectOffsitePowerPurchaseAgreementDetailsId", "ValueProvidedId")
                        .IsUnique();

                    b.ToTable("Project_Offsite_Power_Purchase_Agreement_Details_Value_Provided");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectOnsiteSolarDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Onsite_Solar_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumAnnualSiteKWh")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Annual_Site_KWh");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Onsite_Solar_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectRenewableRetailDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Renewable_Retail_Details_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Additional_Comments");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int?>("MinimumAnnualSiteKWh")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Annual_Site_KWh");

                    b.Property<int?>("MinimumTermLength")
                        .HasColumnType("int")
                        .HasColumnName("Minimum_Term_Length");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<string>("TimeAndUrgencyConsiderations")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Time_And_Urgency_Considerations");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Renewable_Retail_Details");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectRenewableRetailDetailsPurchaseOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Renewable_Retail_Details_Purchase_Option_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectRenewableRetailDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Renewable_Retail_Details_Id");

                    b.Property<int>("PurchaseOptionId")
                        .HasColumnType("int")
                        .HasColumnName("Purchase_Option_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOptionId");

                    b.HasIndex("ProjectRenewableRetailDetailsId", "PurchaseOptionId")
                        .IsUnique();

                    b.ToTable("Project_Renewable_Retail_Details_Purchase_Option");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectValueProvided", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Value_Provided_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("ValueProvidedId")
                        .HasColumnType("int")
                        .HasColumnName("Value_Provided_Id");

                    b.HasKey("Id");

                    b.HasIndex("ValueProvidedId");

                    b.HasIndex("ProjectId", "ValueProvidedId")
                        .IsUnique();

                    b.ToTable("Project_Value_Provided");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("ProjectId", "RegionId")
                        .IsUnique();

                    b.ToTable("Project_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectSaved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Saved_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project_Saved");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Project_Status_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Project_Status_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Project_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("Technology_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("ProjectId", "TechnologyId")
                        .IsUnique();

                    b.ToTable("Project_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_View_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("Project_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project_View");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Resource_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("Article_Id");

                    b.Property<string>("ContentTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Content_Title");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("ReferenceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Reference_Url");

                    b.Property<int?>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("Type_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ToolId");

                    b.HasIndex("TypeId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ResourceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Resource_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("Resource_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ResourceId", "CategoryId")
                        .IsUnique();

                    b.ToTable("Resource_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ResourceTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Project_Technology_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("Resource_Id");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("Technology_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyId");

                    b.HasIndex("ResourceId", "TechnologyId")
                        .IsUnique();

                    b.ToTable("Resource_Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Resource_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Resource_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Resource_Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PDF"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Video"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WebsiteLink"
                        },
                        new
                        {
                            Id = 4,
                            Name = "QlikApplication"
                        },
                        new
                        {
                            Id = 5,
                            Name = "NativeTool"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Responsibility", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Responsibility_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Responsibility_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Responsibility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sustainability"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Procurement"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Buildings"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CMSRoleId")
                        .HasColumnType("int")
                        .HasColumnName("CMS_Role_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Special");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Role_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_Permission_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Permission");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Additional_Comments");

                    b.Property<long?>("AnnualPower")
                        .HasColumnType("bigint")
                        .HasColumnName("Annual_Power");

                    b.Property<bool?>("BuildingOwned")
                        .HasColumnType("bit")
                        .HasColumnName("Building_Owned");

                    b.Property<long?>("CarportArea")
                        .HasColumnType("bigint")
                        .HasColumnName("Carport_Area");

                    b.Property<int?>("CarportAreaType")
                        .HasColumnType("int")
                        .HasColumnName("Carport_Area_Type");

                    b.Property<bool?>("CarportAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("Carport_Available");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<long?>("LandArea")
                        .HasColumnType("bigint")
                        .HasColumnName("Land_Area");

                    b.Property<int?>("LandAreaType")
                        .HasColumnType("int")
                        .HasColumnName("Land_Area_Type");

                    b.Property<bool?>("LandAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("Land_Available");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<bool>("PortfolioReview")
                        .HasColumnType("bit")
                        .HasColumnName("Portfolio_Review");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Requested_By_User_Id");

                    b.Property<long?>("RoofArea")
                        .HasColumnType("bigint")
                        .HasColumnName("Roof_Area");

                    b.Property<int?>("RoofAreaType")
                        .HasColumnType("int")
                        .HasColumnName("Roof_Area_Type");

                    b.Property<bool?>("RoofAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("Roof_Available");

                    b.Property<string>("SiteAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Site_Address");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RequestedByUserId");

                    b.ToTable("Solar_Quote");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteContractStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Solar_Contract_Structure_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractStructureId")
                        .HasColumnType("int")
                        .HasColumnName("Contract_Structure_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("SolarQuoteId")
                        .HasColumnType("int")
                        .HasColumnName("Solar_Quote_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ContractStructureId");

                    b.HasIndex("SolarQuoteId");

                    b.ToTable("Solar_Quote_Contract_Structure");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteValueProvided", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Solar_Quote_Interest_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("SolarQuoteId")
                        .HasColumnType("int")
                        .HasColumnName("Solar_Quote_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("ValueProvidedId")
                        .HasColumnType("int")
                        .HasColumnName("Value_Provided_Id");

                    b.HasKey("Id");

                    b.HasIndex("SolarQuoteId");

                    b.HasIndex("ValueProvidedId");

                    b.ToTable("Solar_Quote_Interest");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("State_Abbr");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("State_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TermLength", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Term_Length_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Term_Length_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Term_Length");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "12 months"
                        },
                        new
                        {
                            Id = 2,
                            Name = "24 months"
                        },
                        new
                        {
                            Id = 3,
                            Name = "36 months"
                        },
                        new
                        {
                            Id = 4,
                            Name = "> 36 months"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Abbreviation");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("DaylightAbbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Daylight_Abbreviation");

                    b.Property<string>("DaylightName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Daylight_Name");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Display_Name");

                    b.Property<bool>("HasDST")
                        .HasColumnType("bit")
                        .HasColumnName("Has_DST");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Standard_Name");

                    b.Property<double>("UTCOffset")
                        .HasColumnType("float")
                        .HasColumnName("UTC_Offset");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("WindowsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Windows_Name");

                    b.HasKey("Id");

                    b.ToTable("Time_Zone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IconName")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Icon_Name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Active");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ToolHeight")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Height");

                    b.Property<int>("ToolType")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Type");

                    b.Property<string>("ToolUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tool_Url");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("IconName");

                    b.ToTable("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Company_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ToolId");

                    b.ToTable("Tool_Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolPinned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Pinned_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("ToolId");

                    b.HasIndex("UserId");

                    b.ToTable("Tool_Pinned");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tool_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("Tool_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ToolId");

                    b.ToTable("Tool_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TrackingActivity.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Activitity_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("Activity_Location_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Session_Id");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("Activity_Type_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TrackingActivity.ActivityLocation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Activitity_Location_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Activitity_Location_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Activity_Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin page"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admit users"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Review user"
                        },
                        new
                        {
                            Id = 4,
                            Name = "User management"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Add user"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Edit user"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Company management"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Add company"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Edit company"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Group management"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Add group"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Edit group"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Learn page"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Learn details"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Events page"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Event details"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Add event"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Forums page"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Forum details"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Add forum"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Tool management"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Tools page"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Add tool"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Edit tool"
                        },
                        new
                        {
                            Id = 25,
                            Name = "View tool"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Email alert settings"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Announcement management"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Add announcement"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Edit announcement"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Dashboard page"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Project catalog"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Project details"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Project library"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Add project"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Edit project"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Community page"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Search result page"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Notifications page"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Messages page"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Add message"
                        },
                        new
                        {
                            Id = 41,
                            Name = "View message"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Saved content page"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Topic page"
                        },
                        new
                        {
                            Id = 44,
                            Name = "View user profile"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Edit user profile"
                        },
                        new
                        {
                            Id = 46,
                            Name = "View company profile"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Account settings"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TrackingActivity.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Activitity_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Activitity_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Activity_Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Navigation menu item click"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Search filter apply"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Specific filter apply"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Company profile open"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Follow a company"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Contact Provider button click"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Nevermind button click during contacting provider"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Confirm button click during contacting provider"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Event details open"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Attending yes/no button click"
                        },
                        new
                        {
                            Id = 11,
                            Name = "First click on an element on dashboard"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Start following a user"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Start following a forum"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Add a forum to saved items"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Forum open"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Click on a link"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Add a project to saved items"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Project details open"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Click on a tool"
                        },
                        new
                        {
                            Id = 20,
                            Name = "User profile open"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Start a Discussion button click"
                        },
                        new
                        {
                            Id = 22,
                            Name = "View Map button click"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Connect with NEO button click"
                        },
                        new
                        {
                            Id = 24,
                            Name = "New Project button click"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Response on a forum message"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Forum message like button click"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Article open"
                        },
                        new
                        {
                            Id = 28,
                            Name = "About Technologies/Solutions button click"
                        },
                        new
                        {
                            Id = 29,
                            Name = "View all button click"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Project resource click"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Link button click"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TrackingActivity.DashboardClickElementActionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Dashboard_Click_Element_Action_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Dashboard_Click_Element_Action_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Dashboard_Click_Element_Action_Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Messages View"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pinned Tools Customize"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pinned Tool View"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pinned Tool Add"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Learn View All"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Learn View"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Learn Save"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Learn Unsave"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Learn Tag Click"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Events View All"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Event View"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Announcement Button Click"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Suggestion Hide"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Suggestion Skip"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Suggestion Take"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Project Catalog Browse"
                        },
                        new
                        {
                            Id = 17,
                            Name = "About Solutions Click"
                        },
                        new
                        {
                            Id = 18,
                            Name = "About Technologies Click"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Forums View All"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Forum View"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Forum Category Click"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Forum Region Click"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Forum Save"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Forum Unsave"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Forum Pin"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Forum Unpin"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Forum Owner Follow"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Forum Owner Unfollow"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Forum Owner View"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Forum Like"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Forum UnLike"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Forum Comment"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Forum Delete"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Project View"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Project Save"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Project Unsave"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Project Tag Click"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Company View"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Companies View All"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Companies Browse"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TrackingActivity.DashboardResourceViewAllType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Dashboard_Resource_View_All_Type_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Dashboard_Resource_View_All_Type_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Dashboard_Resource_View_All_Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Event"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Forum"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Project"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Company"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Learn"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Message"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TrackingActivity.NavMenuItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Nav_Menu_Item_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nav_Menu_Item_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Nav_Menu_Item");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dashboard"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Projects"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ProjectLibrary"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Learn"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Events"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Community"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Forum"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminComments")
                        .HasMaxLength(12000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AdminComments");

                    b.Property<string>("AzureId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Azure_Id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Company_Id");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("First_Name");

                    b.Property<int>("HeardViaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(9)
                        .HasColumnName("User_Heard_Via_Id");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("Image_Name");

                    b.Property<bool?>("IsPrivateUser")
                        .HasColumnType("bit")
                        .HasColumnName("IsPrivateUser");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<DateTime?>("RequestDeleteDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Request_Delete_Date");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Id");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("Time_Zone_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HeardViaId");

                    b.HasIndex("ImageName");

                    b.HasIndex("StatusId");

                    b.HasIndex("TimeZoneId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserEmailAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Email_Alert_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("EmailAlertId")
                        .HasColumnType("int")
                        .HasColumnName("Email_Alert_Id");

                    b.Property<int>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("Frequency");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("EmailAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Email_Alert");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Follower_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int")
                        .HasColumnName("Followed_Id");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("Follower_Id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("User_Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Notification_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DetailsModifiedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Details_Modified_Time");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Read");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Seen");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Notification_Type");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsRead");

                    b.HasIndex("UserId", "IsSeen");

                    b.ToTable("User_Notification");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminComments")
                        .HasMaxLength(12000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AdminComments");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Company_Id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Company_Name");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Country_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("First_Name");

                    b.Property<int>("HeardViaId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Heard_Via_Id");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<string>("JoiningInterestDetails")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Joining_Interest_Details");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Last_Name");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Role_Id");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int")
                        .HasColumnName("User_Pending_Time_Zone_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HeardViaId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TimeZoneId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("User_Pending");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Permission_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("Permission_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Permission");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("About");

                    b.Property<bool>("AcceptWelcomeSeriesEmail")
                        .HasColumnType("bit")
                        .HasColumnName("Accept_Welcome_Series_Email");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Job_Title");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("LinkedIn_Url");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("ResponsibilityId")
                        .HasColumnType("int")
                        .HasColumnName("User_Responsibility_Id");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("UserId");

                    b.HasIndex("ResponsibilityId");

                    b.HasIndex("StateId");

                    b.ToTable("User_Profile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Category_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Region_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("Region_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileUrlLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Url_Link_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("Url_Link");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Url_Name");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("User_Profile_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User_Profile_Url_Link");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Role_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("User_Status_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("User_Status_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("User_Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Onboard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ValueProvided", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Value_Provided_Id");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Created_User_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_Ts");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("Last_Change_Ts");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Value_Provided_Name");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("Updated_User_Id");

                    b.HasKey("Id");

                    b.ToTable("Value_Provided");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cost Savings"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Environmental Attributes and/or Carbon Reduction Targets"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Story/Publicity"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Resiliency"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Other"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Renewable Attributes"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Energy Arbitrage"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Visible Commitment to Climate Action"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Community Benefits"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Energy Savings/Reduction"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Greenhouse Gas Emission Reduction Offset"
                        });
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Announcement", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Audience")
                        .WithMany()
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Blob", "BackgroundImage")
                        .WithMany()
                        .HasForeignKey("BackgroundImageName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Audience");

                    b.Navigation("BackgroundImage");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ArticleSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany("ArticleSaved")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Attachment", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Blob", "Image")
                        .WithMany()
                        .HasForeignKey("ImageName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Blob", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.BlobContainer", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Article", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.ArticleType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany("ArticleRegions")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany("ArticleRoles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleSolution", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany("ArticleSolutions")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleTechnology", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany("ArticleTechnologies")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.ArticleView", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Solution", "Solution")
                        .WithMany("Categories")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.CategoryTechnology", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("Technologies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Technology", "Technology")
                        .WithMany("Categories")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Blob", "Image")
                        .WithMany()
                        .HasForeignKey("ImageLogo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CompanyStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Image");

                    b.Navigation("Industry");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyFollower", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyOffsitePPA", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("OffsitePPAs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.OffsitePPA", "OffsitePPA")
                        .WithMany()
                        .HasForeignKey("OffsitePPAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("OffsitePPA");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CompanyUrlLink", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("UrlLinks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.DiscussionSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("DiscussionCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionCategories")
                        .HasForeignKey("DisscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionFollower", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionFollowers")
                        .HasForeignKey("DisscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionRegions")
                        .HasForeignKey("DisscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany("DiscussionRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionSaved")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.DiscussionUser", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("DiscussionUsers")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Event", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventAttendee", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventAttendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("EventCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventInvitedCategories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventInvitedRegions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventInvitedRoles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventInvitedUser", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventInvitedUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventLink", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventModerator", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventModerators")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EventOccurrence", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Event", "Event")
                        .WithMany("EventOccurrences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Message", "ParentMessage")
                        .WithMany("Messages")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("ParentMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.MessageLike", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Message", "Message")
                        .WithMany("MessageLikes")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.ProjectStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Owner");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectBatteryStorageDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectBatteryStorageDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectBatteryStorageDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectCarbonOffsetsDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectCarbonOffsetsDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectCarbonOffsetsDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectCarbonOffsetsDetailsTermLength", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.ProjectDetails.ProjectCarbonOffsetsDetails", "ProjectCarbonOffsetsDetails")
                        .WithMany("StripLengths")
                        .HasForeignKey("ProjectCarbonOffsetsDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TermLength", "TermLength")
                        .WithMany()
                        .HasForeignKey("TermLengthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectCarbonOffsetsDetails");

                    b.Navigation("TermLength");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectCommunitySolarDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectCommunitySolarDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectCommunitySolarDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectContractStructure", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.ContractStructure", "ContractStructure")
                        .WithMany()
                        .HasForeignKey("ContractStructureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany("ContractStructures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContractStructure");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEACDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectEACDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectEACDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEACDetailsTermLength", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.ProjectDetails.ProjectEACDetails", "ProjectEACDetails")
                        .WithMany("StripLengths")
                        .HasForeignKey("ProjectEACDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TermLength", "TermLength")
                        .WithMany()
                        .HasForeignKey("TermLengthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectEACDetails");

                    b.Navigation("TermLength");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEfficiencyAuditsAndConsultingDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectEfficiencyAuditsAndConsultingDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectEfficiencyAuditsAndConsultingDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEfficiencyEquipmentMeasuresDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectEfficiencyEquipmentMeasuresDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectEfficiencyEquipmentMeasuresDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEmergingTechnologyDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectEmergingTechnologyDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectEmergingTechnologyDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEVChargingDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectEVChargingDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectEVChargingDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectFuelCellsDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectFuelCellsDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectFuelCellsDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectGreenTariffsDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectGreenTariffsDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectGreenTariffsDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TermLength", "TermLength")
                        .WithMany()
                        .HasForeignKey("TermLengthId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");

                    b.Navigation("TermLength");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectOffsitePowerPurchaseAgreementDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.EAC", "EAC")
                        .WithMany()
                        .HasForeignKey("EACId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Currency", "ForAllPriceEntriesCurrency")
                        .WithMany()
                        .HasForeignKey("ForAllPriceEntriesCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.IsoRto", "IsoRto")
                        .WithMany()
                        .HasForeignKey("IsoRtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.PricingStructure", "PricingStructure")
                        .WithMany()
                        .HasForeignKey("PricingStructureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectOffsitePowerPurchaseAgreementDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectOffsitePowerPurchaseAgreementDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.SettlementCalculationInterval", "SettlementCalculationInterval")
                        .WithMany()
                        .HasForeignKey("SettlementCalculationIntervalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.SettlementHubOrLoadZone", "SettlementHubOrLoadZone")
                        .WithMany()
                        .HasForeignKey("SettlementHubOrLoadZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.SettlementPriceInterval", "SettlementPriceInterval")
                        .WithMany()
                        .HasForeignKey("SettlementPriceIntervalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.SettlementType", "SettlementType")
                        .WithMany()
                        .HasForeignKey("SettlementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EAC");

                    b.Navigation("ForAllPriceEntriesCurrency");

                    b.Navigation("IsoRto");

                    b.Navigation("PricingStructure");

                    b.Navigation("ProductType");

                    b.Navigation("Project");

                    b.Navigation("SettlementCalculationInterval");

                    b.Navigation("SettlementHubOrLoadZone");

                    b.Navigation("SettlementPriceInterval");

                    b.Navigation("SettlementType");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectOffsitePPADetailsValueProvided", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.ProjectDetails.ProjectOffsitePowerPurchaseAgreementDetails", "ProjectOffsitePowerPurchaseAgreementDetails")
                        .WithMany("ValuesToOfftakers")
                        .HasForeignKey("ProjectOffsitePowerPurchaseAgreementDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.ValueProvided", "ValueProvided")
                        .WithMany()
                        .HasForeignKey("ValueProvidedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectOffsitePowerPurchaseAgreementDetails");

                    b.Navigation("ValueProvided");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectOnsiteSolarDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectOnsiteSolarDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectOnsiteSolarDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectRenewableRetailDetails", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithOne("ProjectRenewableRetailDetails")
                        .HasForeignKey("SE.Neo.Core.Entities.ProjectDetails.ProjectRenewableRetailDetails", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectRenewableRetailDetailsPurchaseOption", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.ProjectDetails.ProjectRenewableRetailDetails", "ProjectRenewableRetailDetails")
                        .WithMany("PurchaseOptions")
                        .HasForeignKey("ProjectRenewableRetailDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.ProjectDataTypes.PurchaseOption", "PurchaseOption")
                        .WithMany()
                        .HasForeignKey("PurchaseOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectRenewableRetailDetails");

                    b.Navigation("PurchaseOption");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectValueProvided", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany("ValuesProvided")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.ValueProvided", "ValueProvided")
                        .WithMany()
                        .HasForeignKey("ValueProvidedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ValueProvided");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany("Regions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectSaved", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany("ProjectSaved")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectTechnology", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany("Technologies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectView", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Resource", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.ResourceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tool");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ResourceCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("CategoryResources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Resource", "Resource")
                        .WithMany("ResourceCategories")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ResourceTechnology", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Resource", "Resource")
                        .WithMany("ResourceTechnologies")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.CMS.Technology", "Technology")
                        .WithMany("TechnologyResources")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuote", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteContractStructure", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.ContractStructure", "ContractStructure")
                        .WithMany()
                        .HasForeignKey("ContractStructureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.SolarQuote", "SolarQuote")
                        .WithMany("ContractStructures")
                        .HasForeignKey("SolarQuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContractStructure");

                    b.Navigation("SolarQuote");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuoteValueProvided", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.SolarQuote", "SolarQuote")
                        .WithMany("Interests")
                        .HasForeignKey("SolarQuoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.ValueProvided", "ValueProvided")
                        .WithMany()
                        .HasForeignKey("ValueProvidedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SolarQuote");

                    b.Navigation("ValueProvided");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.State", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Tool", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Blob", "Icon")
                        .WithMany()
                        .HasForeignKey("IconName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolCompany", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany("Companies")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolPinned", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany("Pinned")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ToolRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Tool", "Tool")
                        .WithMany("Roles")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.TrackingActivity.Activity", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.TrackingActivity.ActivityLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TrackingActivity.ActivityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.HeardVia", "HeardVia")
                        .WithMany()
                        .HasForeignKey("HeardViaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Blob", "Image")
                        .WithMany()
                        .HasForeignKey("ImageName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.UserStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("HeardVia");

                    b.Navigation("Image");

                    b.Navigation("Status");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserEmailAlert", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.EmailAlert", "EmailAlert")
                        .WithMany("UserEmailAlerts")
                        .HasForeignKey("EmailAlertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("UserEmailAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmailAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserFollower", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "Followed")
                        .WithMany("FollowerUsers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "Follower")
                        .WithMany("FollowedUsers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserNotification", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPending", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.HeardVia", "HeardVia")
                        .WithMany()
                        .HasForeignKey("HeardViaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("HeardVia");

                    b.Navigation("Role");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserPermission", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Responsibility", "Responsibility")
                        .WithMany()
                        .HasForeignKey("ResponsibilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("SE.Neo.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Responsibility");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileCategory", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Category", "Category")
                        .WithMany("UserProfiles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Categories")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileRegion", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.CMS.Region", "Region")
                        .WithMany("UserProfiles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("Regions")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfileUrlLink", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.UserProfile", "UserProfile")
                        .WithMany("UrlLinks")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserRole", b =>
                {
                    b.HasOne("SE.Neo.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SE.Neo.Core.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Article", b =>
                {
                    b.Navigation("ArticleCategories");

                    b.Navigation("ArticleRegions");

                    b.Navigation("ArticleRoles");

                    b.Navigation("ArticleSaved");

                    b.Navigation("ArticleSolutions");

                    b.Navigation("ArticleTechnologies");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Category", b =>
                {
                    b.Navigation("CategoryResources");

                    b.Navigation("DiscussionCategories");

                    b.Navigation("EventCategories");

                    b.Navigation("Technologies");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Region", b =>
                {
                    b.Navigation("DiscussionRegions");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Solution", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.CMS.Technology", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("TechnologyResources");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Company", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("OffsitePPAs");

                    b.Navigation("Projects");

                    b.Navigation("UrlLinks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Discussion", b =>
                {
                    b.Navigation("DiscussionCategories");

                    b.Navigation("DiscussionFollowers");

                    b.Navigation("DiscussionRegions");

                    b.Navigation("DiscussionSaved");

                    b.Navigation("DiscussionUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.EmailAlert", b =>
                {
                    b.Navigation("UserEmailAlerts");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Event", b =>
                {
                    b.Navigation("EventAttendees");

                    b.Navigation("EventCategories");

                    b.Navigation("EventInvitedCategories");

                    b.Navigation("EventInvitedRegions");

                    b.Navigation("EventInvitedRoles");

                    b.Navigation("EventInvitedUsers");

                    b.Navigation("EventLinks");

                    b.Navigation("EventModerators");

                    b.Navigation("EventOccurrences");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("MessageLikes");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Permission", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Project", b =>
                {
                    b.Navigation("ContractStructures");

                    b.Navigation("ProjectBatteryStorageDetails")
                        .IsRequired();

                    b.Navigation("ProjectCarbonOffsetsDetails")
                        .IsRequired();

                    b.Navigation("ProjectCommunitySolarDetails")
                        .IsRequired();

                    b.Navigation("ProjectEACDetails")
                        .IsRequired();

                    b.Navigation("ProjectEVChargingDetails")
                        .IsRequired();

                    b.Navigation("ProjectEfficiencyAuditsAndConsultingDetails")
                        .IsRequired();

                    b.Navigation("ProjectEfficiencyEquipmentMeasuresDetails")
                        .IsRequired();

                    b.Navigation("ProjectEmergingTechnologyDetails")
                        .IsRequired();

                    b.Navigation("ProjectFuelCellsDetails")
                        .IsRequired();

                    b.Navigation("ProjectGreenTariffsDetails")
                        .IsRequired();

                    b.Navigation("ProjectOffsitePowerPurchaseAgreementDetails")
                        .IsRequired();

                    b.Navigation("ProjectOnsiteSolarDetails")
                        .IsRequired();

                    b.Navigation("ProjectRenewableRetailDetails")
                        .IsRequired();

                    b.Navigation("ProjectSaved");

                    b.Navigation("Regions");

                    b.Navigation("Technologies");

                    b.Navigation("ValuesProvided");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectCarbonOffsetsDetails", b =>
                {
                    b.Navigation("StripLengths");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectEACDetails", b =>
                {
                    b.Navigation("StripLengths");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectOffsitePowerPurchaseAgreementDetails", b =>
                {
                    b.Navigation("ValuesToOfftakers");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.ProjectDetails.ProjectRenewableRetailDetails", b =>
                {
                    b.Navigation("PurchaseOptions");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Resource", b =>
                {
                    b.Navigation("ResourceCategories");

                    b.Navigation("ResourceTechnologies");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.SolarQuote", b =>
                {
                    b.Navigation("ContractStructures");

                    b.Navigation("Interests");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.Tool", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Pinned");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.User", b =>
                {
                    b.Navigation("FollowedUsers");

                    b.Navigation("FollowerUsers");

                    b.Navigation("Notifications");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");

                    b.Navigation("UserEmailAlerts");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("SE.Neo.Core.Entities.UserProfile", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Regions");

                    b.Navigation("UrlLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
